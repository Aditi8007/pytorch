# @generated DO NOT EDIT MANUALLY
# Template is at:    .github/templates/linux_binary_build_workflow.yml.j2
# Generation script: .github/scripts/generate_ci_workflows.py
name: linux-binary-libtorch

on:
  pull_request:
    types: [opened, synchronize, reopened, unassigned]
  push:
    branches:
      - master
      - release/*
  workflow_dispatch:

env:
  PYTORCH_BUILD_NUMBER: 1
  SKIP_ALL_TESTS: 1
  PYTORCH_ROOT: /pytorch
  BUILD_ENVIRONMENT: linux-binary-libtorch
  IN_CI: 1
  IS_GHA: 1
  ALPINE_IMAGE: "308535385114.dkr.ecr.us-east-1.amazonaws.com/tool/alpine"
  PR_LABELS: ${{ toJson(github.event.pull_request.labels.*.name) }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AWS_DEFAULT_REGION: us-east-1
  PR_NUMBER: ${{ github.event.pull_request.number }}
  SHA1: ${{ github.event.pull_request.head.sha || github.sha }}
  PYTORCH_RETRY_TEST_CASES: 1
  PYTORCH_FINAL_PACKAGE_DIR: /tmp/artifacts
  # Needed for conda builds
  TORCH_CONDA_BUILD_FOLDER: pytorch-nightly
  ANACONDA_USER: pytorch
concurrency:
  group: linux-binary-libtorch-${{ github.event.pull_request.number || github.sha }}-${{ github.event_name == 'workflow_dispatch' }}
  cancel-in-progress: true

jobs:

  generate-build-matrix:
    if: ${{ (github.repository == 'pytorch/pytorch') && (
            (github.event_name == 'push') ||
            (github.event_name == 'schedule') ||
            (contains(github.event.pull_request.labels.*.name, 'ciflow/all') || contains(github.event.pull_request.labels.*.name, 'ciflow/binaries') || contains(github.event.pull_request.labels.*.name, 'ciflow/binaries/conda') || contains(github.event.pull_request.labels.*.name, 'ciflow/trunk')) ||
            (false))
         }}
    runs-on: ubuntu-18.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    container:
      image: python:3.9
    steps:
      - name: Clone pytorch/pytorch
        uses: actions/checkout@v2
      - name: Generating build matrix
        id: set-matrix
        run: |
          # outputting for debugging purposes
          MATRIX=$(python .github/scripts/generate_binary_build_matrix.py libtorch)
          echo "${MATRIX}"
          echo "::set-output name=matrix::${MATRIX}"

  build:
    name: pytorch-libtorch-${{ matrix.gpu_arch_type }}${{ matrix.gpu_arch_version }}-${{ matrix.devtoolset }}-${{ matrix.libtorch_variant }}
    if: ${{ github.repository_owner == 'pytorch' }}
    runs-on: linux.2xlarge
    timeout-minutes: 240
    needs: generate-build-matrix
    strategy:
      matrix:
        ${{ fromJson(needs.generate-build-matrix.outputs.matrix) }}
      fail-fast: false
    container:
      image: ${{ matrix.container_image }}
    env:
      DESIRED_PYTHON: ${{ matrix.python_version }}
      # TODO: This is a legacy variable that we eventually want to get rid of in
      #       favor of GPU_ARCH_VERSION
      DESIRED_CUDA: ${{ matrix.gpu_arch_version }}
      GPU_ARCH_VERSION: ${{ matrix.gpu_arch_version }}
      GPU_ARCH_TYPE: ${{ matrix.gpu_arch_type }}
      PYTORCH_BUILD_NUMBER: 1
      SKIP_ALL_TESTS: 1
    steps:
      - name: Clone pytorch/pytorch
        uses: actions/checkout@v2
        with:
          path: /pytorch
          submodules: recursive
      - name: Clone pytorch/builder
        uses: actions/checkout@v2
        with:
          repository: pytorch/builder
          path: /builder
      - name: Generate version string
        working-directory: /pytorch/
        run: |
          version=$(.github/scripts/generate_pytorch_version.py)
          echo "Generated version: ${version}"
          echo "PYTORCH_BUILD_VERSION=${version}" >> "$GITHUB_ENV"
      - name: Set BUILD_SPLIT_CUDA
        if: ${{ matrix.gpu_arch_type == 'cuda' && startsWith(matrix.gpu_arch_version, '11') }}
        run: |
          echo "BUILD_SPLIT_CUDA=1" >> "$GITHUB_ENV"
      - name: Build PyTorch binary
        run: |
          bash /builder/libtorch/build.sh
      - uses: actions/upload-artifact@v2
        with:
          name: pytorch-libtorch-${{ matrix.gpu_arch_type }}${{ matrix.gpu_arch_version }}-${{ matrix.devtoolset }}-${{ matrix.libtorch_variant }}
          path:
            ${{ env.PYTORCH_FINAL_PACKAGE_DIR }}/*
      - name: Parse ref
        id: parse-ref
        working-directory: /pytorch/
        run: |
          .github/scripts/parse_ref.py
      - name: Display and upload binary build size statistics (Click Me)
        env:
          SCRIBE_GRAPHQL_ACCESS_TOKEN: ${{ secrets.SCRIBE_GRAPHQL_ACCESS_TOKEN }}
          BRANCH: ${{ steps.parse-ref.outputs.branch }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          SHA1: ${{ github.event.pull_request.head.sha || github.sha }}
          TAG: ${{ steps.parse-ref.outputs.tag }}
          WORKFLOW_ID: '${{ github.run_id }}_${{ github.run_number }}'
        working-directory: /pytorch/
        run: |
          COMMIT_TIME=$(git log --max-count=1 --format=%ct || echo 0)
          export COMMIT_TIME
          pip3 install requests==2.26
          python3 -m tools.stats.upload_binary_size_to_scuba || exit 0
